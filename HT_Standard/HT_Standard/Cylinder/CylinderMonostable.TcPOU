<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CylinderMonostable" Id="{a60690f5-9df7-4d3d-bfc8-0271fb0f4ee7}" SpecialFunc="None">
    <Declaration><![CDATA[/// Manage a monostable valve
/// use inGoToHomePos and inGoToWorkPos to command the valve
/// inGoToHomePos has precedence to inGoToWorkPos
FUNCTION_BLOCK PUBLIC CylinderMonostable
VAR_INPUT
    inReset      : BOOL; // Force the valve to stay in place
    inErrorAck   : BOOL;
    inManualMode : BOOL;

    inGoToPosHome : BOOL;
    inGoToPosWork : BOOL;

    inAtPosHome_sensor : BOOL; // feedback sensor to confirm home position
    inAtPosWork_sensor : BOOL; // feedback sensor to confirm work position

    inTimingConfig : CylinderTimingConfig;

END_VAR
VAR_OUTPUT
    outValvePosWork : BOOL;
    outAtPosHome    : BOOL;
    outAtPosWork    : BOOL;
    outError        : BOOL;
    outErrorID      : UDINT;
    outErrorString  : STRING;
END_VAR
VAR
    _state            : eCylinderStep;
    _stateBeforeError : eCylinderStep;

    _bpManu : ButtonTrig;

    TON_ErrAS             : Tc2_Standard.TON;
    TON_ErrGS             : Tc2_Standard.TON;
    TOF_sensorHomePosLost : Tc2_Standard.TOF;
    TOF_sensorWorkPosLost : Tc2_Standard.TOF;
    TON_GS_AS             : Tc2_Standard.TON;
    TON_WaitAS            : Tc2_Standard.TON;
    TON_WaitGS            : Tc2_Standard.TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// inGoToWorkPos can not be TRUE if inGoToHomePos is TRUE
inGoToPosWork := inGoToPosWork AND NOT inGoToPosHome;

IF inReset THEN
    _stateBeforeError := eCylinderStep.RESET;
    _state            := eCylinderStep.RESET;
END_IF

IF inErrorAck AND (outErrorID <> 0) THEN
    outErrorID := 0;
    _state     := _stateBeforeError;
END_IF

_bpManu(inDisable := NOT inManualMode,
        inOn      := outAtPosWork,
        inError   := outError);

// We update the timer to notice an error
TON_ErrGS();

// We update the timer to notice an error
TON_ErrAS();

TOF_sensorHomePosLost(IN := inAtPosHome_sensor,
                      PT := inTimingConfig.sensorFilterTime);

TOF_sensorWorkPosLost(IN := inAtPosWork_sensor,
                      PT := inTimingConfig.sensorFilterTime);

TON_GS_AS(IN := inAtPosHome_sensor AND inAtPosWork_sensor,
          PT := inTimingConfig.sensorFilterTime);

TON_WaitGS(in := inAtPosHome_sensor,
           PT := inTimingConfig.atHomePos_time);

TON_WaitAS(in := inAtPosWork_sensor,
           PT := inTimingConfig.atWorkPos_time);

IF TON_GS_AS.Q THEN
    outErrorID        := eCylinderError.sensorHomeAndWorkBothActivated;
    _stateBeforeError := eCylinderStep.RESET;
    _state            := eCylinderStep.ERROR;
END_IF

CASE _state OF

eCylinderStep.RESET:
    IF NOT inReset THEN
        IF inAtPosHome_sensor THEN
            _state := eCylinderStep.IN_HOME_POS;
        ELSIF inAtPosWork_sensor THEN
            _state := eCylinderStep.IN_WORK_POS;
        ELSIF outValvePosWork THEN
            _state := eCylinderStep.MOVE_TO_WORK_POS;
        ELSE
            _state := eCylinderStep.MOVE_TO_HOME_POS;
        END_IF
    END_IF

eCylinderStep.IN_HOME_POS:
    IF inManualMode THEN
        IF _bpManu.outRisingEdge THEN
            _state := eCylinderStep.MOVE_TO_WORK_POS;
        END_IF
    ELSIF inGoToPosWork THEN
        _state := eCylinderStep.MOVE_TO_WORK_POS;
    ELSIF NOT TOF_sensorHomePosLost.Q THEN
        outErrorID        := eCylinderError.sensorInHomePosDisapeared;
        _stateBeforeError := eCylinderStep.MOVE_TO_HOME_POS;
        _state            := eCylinderStep.ERROR;
    END_IF

eCylinderStep.MOVE_TO_WORK_POS:
    IF TON_WaitAS.Q OR inManualMode THEN
        _state := eCylinderStep.IN_WORK_POS;
    ELSIF inGoToPosHome THEN
        _state := eCylinderStep.MOVE_TO_HOME_POS;
    ELSIF TON_ErrAS.Q THEN
        outErrorID        := eCylinderError.timeoutMoveInWorkPos;
        _stateBeforeError := eCylinderStep.MOVE_TO_WORK_POS;
        _state            := eCylinderStep.ERROR;
    END_IF

eCylinderStep.IN_WORK_POS:
    IF inManualMode THEN
        IF _bpManu.outRisingEdge THEN
            _state := eCylinderStep.MOVE_TO_HOME_POS;
        END_IF
    ELSIF inGoToPosHome THEN
        _state := eCylinderStep.MOVE_TO_HOME_POS;
    ELSIF NOT TOF_sensorWorkPosLost.Q THEN
        outErrorID        := eCylinderError.sensorInWorkPosDisapeared;
        _stateBeforeError := eCylinderStep.MOVE_TO_WORK_POS;
        _state            := eCylinderStep.ERROR;
    END_IF

eCylinderStep.MOVE_TO_HOME_POS:
    IF TON_WaitGS.Q OR inManualMode THEN
        _state := eCylinderStep.IN_HOME_POS;
    ELSIF inGoToPosWork THEN
        _state := eCylinderStep.MOVE_TO_WORK_POS;
    ELSIF TON_ErrGS.Q THEN
        outErrorID        := eCylinderError.timeoutMoveInHomePos;
        _stateBeforeError := eCylinderStep.MOVE_TO_HOME_POS;
        _state            := eCylinderStep.ERROR;
    END_IF

eCylinderStep.ERROR:
    IF (outErrorID = 0) THEN
        outErrorID := eCylinderError.inErrorState;
    END_IF;

ELSE
    outErrorID := eCylinderError.uknownStepNumber;
    _state     := eCylinderStep.ERROR;
END_CASE

IF (_state <> eCylinderStep.RESET) AND (_state <> eCylinderStep.ERROR) THEN
    outValvePosWork := (_state = eCylinderStep.MOVE_TO_WORK_POS) OR (_state = eCylinderStep.IN_WORK_POS);
END_IF

// We have to update the timer here to be able to match the timing error
TON_ErrGS(in := (_state = eCylinderStep.MOVE_TO_HOME_POS) AND NOT inAtPosHome_sensor,
          pt := inTimingConfig.alarmToHomPos_time);

// We have to update the timer here to be able to match the timing error
TON_ErrAS(in := (_state = eCylinderStep.MOVE_TO_WORK_POS) AND NOT inAtPosWork_sensor,
          pt := inTimingConfig.alarmToWorkPos_time);

outAtPosHome   := (_state = eCylinderStep.IN_HOME_POS);
outAtPosWork   := (_state = eCylinderStep.IN_WORK_POS);
outError       := (outErrorID <> 0);
outErrorID     := outErrorID;
outErrorString := TO_STRING(outErrorID);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>